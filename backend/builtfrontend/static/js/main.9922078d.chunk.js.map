{"version":3,"sources":["HackChan_Logo.png","components/requests/fetch.js","Content/ModalButton.js","Header/gif2.gif","Header/Header.js","Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["THREADS_URL","a","fetch","response","json","timestamp","url","URL","search","URLSearchParams","toString","thread","console","log","method","headers","body","JSON","stringify","comment","ModalButton","useState","aOT","setAOT","lgShow","setLgShow","submitShow","setSubmitShow","submitBody","setSubmitBody","bodyInput","setBodyInput","modalTitle","setModalTitle","modalBody","setModalBody","threadTime","setThreadTime","threadNumComments","setThreadNumComments","buttons","map","x","className","Button","variant","size","active","block","id","createdAt","onClick","time","threadname","threadcommentcount","parentTimeUnder","replace","Request","getCommentsForThread","then","ret","comments","comment_text","comment_time","handleClick","title","count","useEffect","getThreads","Modal","show","onHide","aria-labelledby","Header","closeButton","Title","Body","Form","Group","Control","type","as","rows","placeholder","onInput","e","target","value","Footer","createNewComment","titleInput","setTitleInput","Navbar","bg","expand","Brand","href","src","hlogo","alt","Toggle","aria-controls","Collapse","class","Nav","Link","createNewThread","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9922078d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/HackChan_Logo.0b950b45.png\";","const THREADS_URL = \"http://localhost:5000/threads\";\r\nconst COMMENTS_URL = \"http://localhost:5000/threads/thread_id\";\r\n\r\n/*\r\nUsage:\r\nimport Request from 'PATH/TO/fetch';\r\n\r\nRequest.createNewComment({\r\n    parentTime: \"2021-02-21T14:48:43.000Z\",\r\n    text: \"lol nerd git gud\"\r\n})\r\n.then(r => console.log(r))\r\n.catch(e => console.error(e));\r\n\r\ndo stuff with r\r\n*/\r\n\r\n\r\n\r\n\r\nclass Request {\r\n  async getThreads() {\r\n    const response = await fetch(THREADS_URL);\r\n    return response.json();\r\n    /*\r\n    .then(res => res.json())\r\n    .then(data => console.log(data))\r\n    .catch(err => console.error(err));\r\n    */\r\n  }\r\n\r\n/*\r\n{\r\n  thread_time: \"ISO TIMESTAMP WITH COLONS REPLACED BY UNDERSCORES\"\r\n}\r\n*/\r\n\r\n  async getCommentsForThread(timestamp) {\r\n    let url = new URL(COMMENTS_URL);\r\n    url.search = new URLSearchParams(timestamp).toString();\r\n    const response = await fetch(url);\r\n\r\n    return response.json();\r\n  }\r\n\r\n//see template.json\r\n  async createNewThread(thread) {\r\n      console.log(thread);\r\n      const response = await fetch(THREADS_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(thread)\r\n      });\r\n      return response.json();\r\n  }\r\n\r\n//see template.json\r\n  async createNewComment(comment) {\r\n      console.log(comment)\r\n      const response = await fetch(THREADS_URL, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(comment)\r\n      });\r\n      return response.json();\r\n  }\r\n}\r\n\r\nexport default new Request();\r\n","import React, { useEffect, useState  } from 'react';\r\n\r\nimport { Form, Modal, Button } from 'react-bootstrap';\r\nimport './Content.css';\r\nimport Request from '../components/requests/fetch';\r\n\r\nfunction ModalButton() {\r\n    const [aOT, setAOT] = useState([]);\r\n    /*let arrayOfThreads = [\r\n        {\r\n          \"title\": \"Best bedtime stories thread\",\r\n          \"count\": 10,\r\n          \"createdAt\": \"123456\"\r\n        },\r\n        \r\n        {\r\n          \"title\": \"C# is superior language?\",\r\n          \"count\": 5,\r\n          \"createdAt\": \"987654321\"\r\n        }\r\n    ];*/\r\n\r\n    \r\n\r\n    const [lgShow, setLgShow] = useState(false);\r\n    const [submitShow, setSubmitShow] = useState(false);\r\n    const [submitBody, setSubmitBody] = useState(false);\r\n    const [bodyInput, setBodyInput] = useState(\"\");\r\n\r\n\r\n    const [modalTitle, setModalTitle] = useState(false);\r\n    const [modalBody, setModalBody] = useState(false);\r\n    const [threadTime, setThreadTime] = useState(false);\r\n    const [threadNumComments, setThreadNumComments] = useState(false);\r\n    \r\n    let handleClick = (time, threadname, threadcommentcount) =>  {\r\n        let parentTimeUnder = time.replace(/:/g,\"_\");\r\n        console.log(parentTimeUnder)\r\n        setLgShow(true);\r\n        setModalTitle(threadname);\r\n        setThreadTime(time);\r\n        Request.getCommentsForThread({\"thread_time\":parentTimeUnder})\r\n        .then(ret => setModalBody(\r\n            \r\n            ret.comments.map((x) => {\r\n                return(\r\n                    <p>Anon posted: {x.comment_text} at {x.comment_time}</p>\r\n                )\r\n            })\r\n\r\n        ));\r\n        \r\n        /*Request.getCommentsForThread({\"thread_time\":parentTimeUnder})\r\n            .then(ret => {setModalBody(\r\n            \r\n                ret\r\n\r\n\r\n            );\r\n            console.log(ret);\r\n        });*/\r\n        \r\n        setThreadNumComments(threadcommentcount);\r\n    };\r\n\r\n    let openCommentModal = () => {\r\n        setSubmitShow(true);\r\n        setSubmitBody(\r\n\r\n            <Form.Group>\r\n                <Form.Control size=\"lg\" type=\"text\" as=\"textarea\" rows=\"5\" placeholder=\"Enter body here\" onInput={e => setBodyInput(e.target.value)}></Form.Control>\r\n            </Form.Group>\r\n\r\n        );\r\n    }\r\n  \r\n    let buttons = aOT.map((x) => {\r\n        return(\r\n            <center><p>\r\n                <div className=\"container\">\r\n        <Button variant=\"light\" size=\"lg\" active block id={x.createdAt} onClick={() => handleClick(x.createdAt, x.title, x.count)}>\r\n            Thread: {x.title}\r\n        </Button> </div>\r\n        </p></center>);\r\n        }\r\n    );\r\n\r\n    let handleSubmitReply = () => {\r\n        //let threadTimeUnder = threadTime.replace(/:/g,\"_\");\r\n        console.log(\"submitted data:\" + bodyInput);\r\n        Request.createNewComment({\r\n            'parentTime':threadTime,\r\n            'text':bodyInput\r\n        });\r\n        setSubmitShow(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        Request.getThreads()\r\n            .then(ret => {setAOT(ret)});\r\n\r\n    }, [buttons]);\r\n        \r\n    return (\r\n        <div id=\"mainBodyDiv\">\r\n            {buttons}\r\n\r\n            <Modal\r\n                size=\"xl\"\r\n                show={lgShow}\r\n                onHide={() => setLgShow(false)}\r\n                aria-labelledby=\"example-modal-sizes-title-lg\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                    Thread ({threadTime}): {modalTitle} [{threadNumComments} replies]\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Button variant=\"light\" size=\"lg\" active block onClick={() => openCommentModal()}>\r\n                        Write a comment\r\n                    </Button>\r\n                    <h4>Comments</h4>\r\n                    {modalBody}\r\n                    \r\n                    \r\n                    \r\n                    \r\n                    </Modal.Body>\r\n            </Modal>\r\n            <Modal\r\n                size=\"xl\"\r\n                show={submitShow}\r\n                onHide={() => setSubmitShow(false)}\r\n                aria-labelledby=\"example-modal-sizes-title-lg\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                    Title of current thread: {modalTitle}\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Body of new thread: {submitBody}\r\n                \r\n                    \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={() => handleSubmitReply()}>\r\n                    Submit\r\n                </Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default ModalButton;","export default __webpack_public_path__ + \"static/media/gif2.f3acc5f4.gif\";","import React, {  useState  } from 'react';\r\n\r\nimport hlogo from './gif2.gif'; // gives image path\r\nimport { Form, Modal, Navbar, Nav, Button} from 'react-bootstrap';\r\n\r\nimport './Header.css';\r\nimport Request from '../components/requests/fetch';\r\n\r\nfunction Header () {\r\n    const [lgShow, setLgShow] = useState(false);\r\n    const [modalTitle, setModalTitle] = useState(false);\r\n    const [modalBody, setModalBody] = useState(false);\r\n    const [titleInput, setTitleInput] = useState(\"\");\r\n    const [bodyInput, setBodyInput] = useState(\"\");\r\n//<input value = {titleInput} onInput={e => setTitleInput(e.target.value)}></input>\r\n    let handleClickHeader = () =>  {\r\n        console.log(\"New topic clicked\");\r\n        setLgShow(true);\r\n        setModalTitle(\r\n        \r\n        <Form.Group>\r\n            <Form.Control size=\"lg\" type=\"text\" placeholder=\"Enter title here\" onInput={e => setTitleInput(e.target.value)}></Form.Control>\r\n        </Form.Group>\r\n        \r\n        );\r\n\r\n        //<input value = {bodyInput} onInput={e => setBodyInput(e.target.value)}></input>\r\n        setModalBody(\r\n\r\n        <Form.Group>\r\n            <Form.Control size=\"lg\" type=\"text\" as=\"textarea\" rows=\"5\" placeholder=\"Enter body here\" onInput={e => setBodyInput(e.target.value)}></Form.Control>\r\n        </Form.Group>\r\n        \r\n\r\n        );\r\n\r\n    };\r\n\r\n    let handleSubmitNew = () => {\r\n        console.log(\"submitted data:\" + titleInput + \", \" + bodyInput);\r\n        Request.createNewThread({\r\n            'title':titleInput,\r\n            'text':bodyInput\r\n        });\r\n        setLgShow(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <Navbar bg=\"primary\" expand=\"lg\">\r\n                    <div className=\"container\">\r\n                        <Navbar.Brand href=\"\"><img src={hlogo} alt=\"Logo Image\" /></Navbar.Brand>\r\n                      \r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <ul class=\"nav navbar-nav navbar-center\">\r\n                        <li><h1>Welcome to HackChan</h1></li>\r\n        </ul>\r\n                            <Nav className=\"ml-auto\">\r\n                                <Nav.Link href=\"\" onClick={() => handleClickHeader()}><h1>New Topic</h1></Nav.Link>\r\n                                \r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </div>\r\n                </Navbar>\r\n            </div>\r\n\r\n            <Modal\r\n                size=\"xl\"\r\n                show={lgShow}\r\n                onHide={() => setLgShow(false)}\r\n                aria-labelledby=\"example-modal-sizes-title-lg\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                    Create a new thread: {modalTitle}\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Write the first comment for the thread:\r\n                    {modalBody}\r\n                    \r\n                    </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={() => handleSubmitNew()}>\r\n                    Submit\r\n                </Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\n\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"Footer\">\r\n\r\n            <p>&copy; HackChan 2021 - Oliver Xie, Brendan Saw, Samuel Jen, Jacob He</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport hlogo from './HackChan_Logo.png'; // gives image path\r\nimport './App.css';\r\n//import Content from './Content/Content';\r\nimport ModalButton from './Content/ModalButton'\r\nimport Header from './Header/Header';\r\nimport Footer from './Footer/Footer';\r\nimport Request from './components/requests/fetch';\r\n\r\nfunction App() {\r\n  return (\r\n  <div className=\"App\">\r\n    <div id=\"wrap\">\r\n      \r\n    <Header></Header>\r\n     <ModalButton></ModalButton>\r\n     </div>\r\n     <Footer></Footer>\r\n  </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}